/*
자바스크립트 연산자

1) 산술연산자 : + - * / % **
2) 증감연산자 : ++ --
3) 비교연산자 : == === != !== >= <=>
    < ▷==:동등,===:일치 4) 논리연산자 : && || !(단항연산자) (short circuit) 5) 삼항연산자 : 조건연산자 (조건식) ? 참 : 거짓; ▷ java에서는 변수에 담아줘야 함. ▷
        js에서는 참, 거짓 위치에 실행문이 들어감. 6) typeof : 단항연산자, 오른쪽의 변수가 어떤 타입인지 출력 7) 비트연산자 :>> << ~ ▷ ~ : 1's complement 연산자=>
            0->1, 1->0으로 변경
            8) 대입연산자 : LV = RV
            ▷ LV는 변수만 가능
            9) 복합대입 연산자 : += -= /= 등등
            10) 전개연산자(spread operator) : ...
            ▷ 배열, 객체에 포함된 값들을 펼치는 연산자
            ▷ 함수의 파라미터에서 사용
            ▷ 대입연산자에서 사용
            변수, 변수 = ... 배열
            */

let a = 3;
console.log(`${a}의 세제곱 = ${a ** 3}`);

// 동등 vs 일치
let x = '3';
console.log(`${a}와 '${x}'의 동등여부 : ${a == x}`); // 문자열을 파싱했을 때 값이 같으면 같다.
console.log(`${a}와 '${x}'의 일치여부 : ${a === x}`); // 일치(타입도 고려)

//
let b = 10;
console.log(`${b}이 0 ~ 50사이의 값? ${b >= 0 && b <= 50}`);    // true
console.log(`${b}이 0 ~ 50사이의 값? ${0 <= b <= 50}`);         // JAVA(오류), Python(true), JS(true나오긴 하는데 잘못된 것!!) // true <= 50 ( 1<=50 )
// 파이썬과 달리 두 단계로 나눠서 연산!
console.log(`${b}이 0 ~ 50사이의 값? ${50 < b < 0}`);   // (false < 0) -> (0 < 0) -> false!

/*  
    Short circuit(단축평가)
    - 왼쪽 연산의 결과에 따라서 오른쪽 연산의 실행여부를 결정하는 기능
    - 논리연산자 (&& ||)

    && (둘 중 하나만 false이면 결과도 false)
    T && ? ==> ? (전체 연산의 결과가 미지수이므로 두번째 연산을 실행함)
    F && ? ==> F (전체 연산의 결과가 F 두번째 연산을 실행하지 않음) => short circuit

    || (둘 중 하나만 true이면 결과도 true)
    T || ? ==> T (전체 연산의 결과가 T이므로 두번째 연산을 실행하지 않음) => short circuit
    F || ? ==> ? (전체 연산의 결과가 미지수이므로 연산을 실행함)
*/

// -------------- 단축평가 실습

let c = 1; // (시험 출제 예정)
c > 1 || console.log('1 - 실행되니?'); // F || ?(실행함)
c == 1 || console.log('2 - 실행되니?'); // F || ?(실행하지 않음)


// --------------- 삼항연산자(조건연산자) 실습  --> (조건) ? (참) : 거짓;
let d = 5;
let e = 3;

d > e ?
    console.log(`${d}가 ${e}보다 크다`) :
    console.log(`${d}가 ${e}보다 작다`); // 세미콜론은 중간에 넣으면 안됨, 자바와 달리 중간에 실행문이 들어감

// ------------- 전개 연산자(spread 연산자)
let obj1 = { name: '홍길동' };
let obj2 = { name: '임꺽정' };
let obj3 = { name: '제주도 제주시' };
// console.log(obj1);


let obj31 = { ...obj1, ...obj2 }; // 결과 : {name: '임꺽정'};
console.log(obj31);

let obj32 = { ...obj2, ...obj3 }; // 결과 : {name: '임꺽정'};
console.log(obj32);

// let obj33 = [...obj2, ...obj3]; // syntex 오류는 아니지만, obj2, 3이 iterable이 아님. 
//                                    [name, '임꺽정'] 라기에는 name이 키값이라 자체 값이 될 수 없음.순서를 가질 수 없어서..
// console.log(obj33);

// ------------------ 배열에 전개연산자 사용
let ary1 = [1, 3, 5, 7];
let ary2 = [2, 4, 5, 8];

let ary41 = [...ary1, ...ary2];
console.log(ary41);

let ary42 = { ...ary1, ...ary2 } // 이것도 syntax 오류는 아니지만,  키값이 어 뭐야 2, 4, 6, 8 뭐야
console.log(ary42);
// 방번호가 key 역할, {0:1, 1:3, 2:5, 3:7 }, {0:2, 1:4, 2:5, 3:8 } 이면 동일 키값에 들어간 `새로운 값`만 남은 것
//방번호가 같은 데이터가 있으므로 Object로 만들면 뒤쪽 데이터만 살아남고, 앞의 데이터는 날아감
